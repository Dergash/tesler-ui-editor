{"version":3,"sources":["components/AppBar/AppBar.module.css","components/View/View.module.css","components/LockedInput/LockedInput.module.css","components/LockedInput/LockedInput.tsx","utils/strings.ts","actions/actions.ts","components/ScreenBuilder/ScreenBuilder.tsx","components/AppSider/AppSider.tsx","components/View/View.tsx","components/AppBar/AppBar.tsx","AppLayout.tsx","reducers/screen.ts","reducers/index.ts","index.tsx","components/AppSider/AppSider.module.css","components/ScreenBuilder/ScreenBuilder.module.css"],"names":["module","exports","LockedInput","props","locked","onLock","rest","lock","className","styles","type","onClick","disabled","addonAfter","kebabStyle","src","toLowerCase","replace","z","SmActionPayloadTypes","addScreen","addScreenSuccess","customSelectScreen","CoreActionPayloadTypes","smActionTypes","createActionTypes","$smDo","createActionCreators","ScreenBuilder","React","useState","name","setName","title","setTitle","nameLock","setNameLock","fileName","setFileName","fileNameLock","setFileNameLock","directoryName","setDirectoryName","directoryNameLock","setDirectoryNameLock","dispatch","useDispatch","visible","useSelector","state","screen","showScreenBuilder","onOk","onCancel","layout","Item","placeholder","onChange","e","currentTarget","value","bordered","collapse","Panel","key","header","panel","label","AppSider","screens","store","pendingScreens","container","mode","menu","defaultSelectedKeys","onSelect","screenName","map","icon","View","find","item","screenJson","JSON","stringify","responsibilities","text","url","responsibilitiesJson","json","AppBar","left","right","AppLayout","Sider","Content","Header","initialState","bo","activeBcName","bc","cachedBc","views","primaryView","filters","sorters","reducers","screenInitialState","reducer","action","payload","App","useEpics","customReducers","locale","enUs","render","document","getElementById"],"mappings":"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","file":"static/js/main.3b3c4bff.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"AppBar_container__3uZgi\",\"left\":\"AppBar_left__uXVLM\",\"right\":\"AppBar_right__B_zWQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"View_container__1dW8E\",\"json\":\"View_json__1sfD-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lock\":\"LockedInput_lock__1wOK0\"};","import React from 'react'\nimport {Input, Icon} from 'antd'\nimport styles from './LockedInput.module.css'\nimport { InputProps } from 'antd/lib/input'\n\ninterface LockedInputProps extends InputProps {\n    locked?: boolean,\n    onLock?: (locked: boolean) => void\n}\n\nexport const LockedInput: React.FC<LockedInputProps> = (props) => {\n    const { locked, onLock, ...rest } = props\n    const handleLock = () => {\n        onLock?.(!locked)\n    }\n    const lock = <Icon\n        className={styles.lock} \n        type={locked ? 'lock' : 'unlock'}\n        onClick={handleLock}\n    />\n    return <Input\n        disabled={locked}\n        addonAfter={lock}\n        {...rest}\n    >\n\n    </Input>\n}","export function kebabStyle(src: string) {\n    return src.toLowerCase().replace(' ', '-')\n}\n","import {ActionsObservable as rActionsObservable} from 'redux-observable'\nimport {AppState} from '../reducers'\nimport {Observable} from 'rxjs/Observable'\nimport {Store} from 'redux'\nimport {\n    ActionPayloadTypes as CoreActionPayloadTypes,\n    AnyAction as CoreAnyAction,\n    uActionsMap,\n    AnyOfMap,\n    createActionCreators,\n    createActionTypes\n} from '@tesler-ui/core'\nimport { ScreenDescriptor } from '../interfaces/screen'\n\nconst z = null as any\n\n/**\n * ActionName: PayloadType = z\n * @param ActionName Name for an action (redux action \"type\") and corresponding action creater action\n * @param PayloadType Typescript description for payload\n * @property z Mandatory to prevent typescript from erasing unused class fields (@see https://github.com/microsoft/TypeScript/issues/12437)\n */\nexport class SmActionPayloadTypes extends CoreActionPayloadTypes {\n    addScreen: null = z\n    addScreenSuccess: { screen: ScreenDescriptor } = z\n    customSelectScreen: { screenName: string } = z\n}\n\nexport const smActionTypes = createActionTypes(new SmActionPayloadTypes())\n\nexport const $smDo = createActionCreators(new SmActionPayloadTypes())\n\nexport type SmActionsMap = uActionsMap<SmActionPayloadTypes>\n\nexport type CustomAnyAction = AnyOfMap<SmActionsMap> | CoreAnyAction\n\nexport interface ActionsObservable<T extends CustomAnyAction> extends rActionsObservable<T> {\n    /**\n     * TODO\n     *\n     * @param key\n     */\n    ofType<K extends keyof SmActionPayloadTypes>(...key: K[]): ActionsObservable<SmActionsMap[K]>\n}\nexport type SmEpic = (action$: ActionsObservable<CustomAnyAction>, store: Store<AppState>) => Observable<CustomAnyAction>\n","import React from 'react'\nimport {Dispatch} from 'redux'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {Modal, Form, Input, Collapse, Empty} from 'antd'\nimport styles from './ScreenBuilder.module.css'\nimport { LockedInput } from '../LockedInput/LockedInput'\nimport { kebabStyle } from '../../utils/strings'\nimport { CustomAnyAction, $smDo } from '../../actions/actions'\nimport { AppState } from '../../reducers'\n\nexport const ScreenBuilder: React.FC = (props) => {\n    const [name, setName] = React.useState('')\n    const [title, setTitle] = React.useState('')\n    const [nameLock, setNameLock] = React.useState(true)\n    const [fileName, setFileName] = React.useState('')\n    const [fileNameLock, setFileNameLock] = React.useState(true)\n    const [directoryName, setDirectoryName] = React.useState('')\n    const [directoryNameLock, setDirectoryNameLock] = React.useState(true)\n    const handleCancel = () => dispatch($smDo.addScreen(null))\n\n    const handleName: React.ChangeEventHandler<HTMLInputElement> = (e) => {\n        setName(e.currentTarget.value)\n    }\n\n    const handleTitle: React.ChangeEventHandler<HTMLInputElement> = (e) => {\n        setTitle(e.currentTarget.value)\n        if (nameLock) {\n            setName(kebabStyle(e.currentTarget.value))\n        }\n        if (fileNameLock) {\n            setFileName(`${kebabStyle(e.currentTarget.value)}.screen.json`)\n        }\n        if (directoryNameLock) {\n            setDirectoryName(kebabStyle(e.currentTarget.value))\n        }\n    }\n\n    const handleFileName: React.ChangeEventHandler<HTMLInputElement> = (e) => {\n        setFileName(e.currentTarget.value)\n    }\n\n    const handleDirectoryName: React.ChangeEventHandler<HTMLInputElement> = (e) => {\n        setDirectoryName(e.currentTarget.value)\n    }\n    \n    const dispatch = useDispatch<Dispatch<CustomAnyAction>>()\n    const handleSave = () => {\n        dispatch($smDo.addScreenSuccess({\n            screen: {\n                name,\n                title,\n                fileName,\n                directoryName\n            }\n        }))\n    }\n    const visible = useSelector((state: AppState) => state.screen.showScreenBuilder)\n    return <Modal visible={visible} title=\"Add new screen\" onOk={handleSave} onCancel={handleCancel}>\n        <Form layout='vertical' >\n            <Form.Item className={styles.title}>\n                <Input placeholder=\"Title\" onChange={handleTitle} value={title} />\n            </Form.Item>\n            <Form.Item className={styles.title}>\n            <Collapse bordered={false} className={styles.collapse}>\n                <Collapse.Panel key=\"1\" header=\"More options\" className={styles.panel}>\n                    <Form.Item label=\"Name\">\n                        <LockedInput\n                            placeholder=\"Name\"\n                            value={name}\n                            onChange={handleName}\n                            locked={nameLock}\n                            onLock={setNameLock}\n                        />\n                    </Form.Item>\n                    <Form.Item label=\"File name\">\n                        <LockedInput\n                            placeholder=\"File name\"\n                            value={fileName}\n                            locked={fileNameLock}\n                            onLock={setFileNameLock}\n                            onChange={handleFileName}\n                        />\n                    </Form.Item>\n                    <Form.Item label=\"Directory name\">\n                        <LockedInput\n                            placeholder=\"Directory name\"\n                            value={directoryName}\n                            locked={directoryNameLock}\n                            onLock={setDirectoryNameLock}\n                            onChange={handleDirectoryName}\n                        />\n                    </Form.Item>\n                    <Form.Item label=\"Primary view(s)\">\n                        <Input placeholder=\"Primary view(s)\" disabled />\n                    </Form.Item>\n                </Collapse.Panel>\n            </Collapse>\n            </Form.Item>\n            <Form.Item label=\"Navigation\">\n                <Empty />\n            </Form.Item>\n        </Form>\n    </Modal>\n}\n\n","import React from 'react'\nimport {Button, Menu} from 'antd'\nimport styles from './AppSider.module.css'\nimport { ScreenBuilder } from '../ScreenBuilder/ScreenBuilder'\nimport {useDispatch, useSelector} from 'react-redux'\nimport { Dispatch } from 'redux'\nimport { CustomAnyAction, $smDo } from '../../actions/actions'\nimport { AppState } from '../../reducers'\nimport { SelectParam } from 'antd/lib/menu'\n\ninterface AppSiderProps {\n    \n}\n\nexport const AppSider: React.FC = (props) => {\n    const dispatch = useDispatch<Dispatch<CustomAnyAction>>()\n    const handleAdd = () => dispatch($smDo.addScreen(null))\n    const handleSelect = (e: SelectParam) => dispatch($smDo.customSelectScreen({ screenName: e.key }))\n    const screens = useSelector((store: AppState) => store.screen.pendingScreens)\n    return <aside className={styles.container}>\n        <div className={styles.header}>\n        </div>\n        <div className={styles.screens}>\n            <Menu\n                mode=\"inline\"\n                className={styles.menu}\n                defaultSelectedKeys={[screens[0]?.name]}\n                onSelect={handleSelect}\n            >\n            { screens.map(screen => {\n                return <Menu.Item key={screen.name} className={styles.screen}>\n                    {screen.title}\n                </Menu.Item>\n            })}\n            </Menu>\n            <Button type=\"primary\" icon=\"plus\" onClick={handleAdd}>\n                Add screen\n            </Button>\n            <ScreenBuilder />\n        </div>\n    </aside>\n}\n","import React from 'react'\nimport {Card} from 'antd'\nimport {useSelector} from 'react-redux'\nimport { AppState } from '../../reducers'\nimport styles from './View.module.css'\n\nexport const View: React.FC = (props) => {\n    const { screens, screenName } = useSelector((store: AppState) => {\n        return {\n            screens: store.screen.pendingScreens,\n            screenName: store.screen.screenName\n        }\n    })\n    const screen = screens.find(item => item.name === screenName)\n    const screenJson = screen ? JSON.stringify(screen, null, 4) : ''\n    const responsibilities = screens.map(item => {\n        return {\n            name: item.name,\n            text: item.title,\n            icon: '',\n            url: `/screens/${item.name}`\n        }\n    })\n    const responsibilitiesJson = JSON.stringify(responsibilities, null, 4);\n    return <div>\n        <Card title={`db/migration/liquibase/data/latest/screens/${screen.directoryName}/${screen.fileName}`}>\n            <p className={styles.json}>\n                {screenJson}\n            </p>\n        </Card>\n        <Card title={`/db/migration/oracle/meta/main/RESPONSIBILITIES.sql`}>\n            <p>insert into responsibilities (id, resp_type, screens, dept_id, internal_role_cd) VALUES (nextval('RESPONSIBILITY_ID'), 'SCREEN',</p>\n            <p className={styles.json}>\n                '{responsibilitiesJson}'\n            </p>\n        </Card>\n    </div>\n}\n","import React from 'react'\nimport {Button} from 'antd'\nimport styles from './AppBar.module.css'\n\nexport const AppBar: React.FC = (props) => {\n    return <div className={styles.container}>\n        <div className={styles.left}>\n            <Button type=\"primary\" icon=\"plus\" disabled>\n                Add View\n            </Button>\n        </div>\n        <div className={styles.right}>\n            <Button type=\"primary\" disabled>\n                Import\n            </Button>\n            <Button type=\"primary\" disabled>\n                Export\n            </Button>\n        </div>\n    </div>\n}\n","import React from 'react'\nimport {Layout} from 'antd'\nimport { AppSider } from './components/AppSider/AppSider'\nimport { View } from './components/View/View'\nimport { AppBar } from './components/AppBar/AppBar'\n\nexport const AppLayout: React.FC = (props) => {\n    return <Layout>\n        <Layout.Sider>\n            <AppSider />\n        </Layout.Sider>\n        <Layout.Content>\n            <Layout.Header>\n                <AppBar />\n            </Layout.Header>\n            <View />\n        </Layout.Content>\n    </Layout> \n}","// import {coreActions} from '@tesler-ui/core'\nimport {BcMetaState} from '@tesler-ui/core/interfaces/bc'\nimport {ObjectMap} from '@tesler-ui/core/interfaces/objectMap'\nimport {EditorScreenState} from '../interfaces/screen'\nimport {AppState} from './index'\nimport {  smActionTypes, CustomAnyAction } from '../actions/actions'\n\nexport const initialState: EditorScreenState = {\n    screenName: 'tutorial',\n    bo: {\n        activeBcName: '',\n        bc: {} as ObjectMap<BcMetaState>\n    },\n    cachedBc: {},\n    views: [],\n    primaryView: '',\n    filters: {},\n    sorters: {},\n    pendingScreens: [{\n        name: 'tutorial',\n        title: 'Tutorial',\n        fileName: 'tutorial.screen.json',\n        directoryName: 'tutorial'\n    }]\n}\n\nexport default function screenReducer(\n    state: EditorScreenState = initialState,\n    action: CustomAnyAction,\n    store: Readonly<AppState>\n): EditorScreenState {\n    switch (action.type) {\n        case smActionTypes.addScreen: {\n            return {\n                ...state,\n                showScreenBuilder: !state.showScreenBuilder\n            }\n        }\n        case smActionTypes.addScreenSuccess: {\n            return {\n                ...state,\n                showScreenBuilder: false,\n                pendingScreens: [ ...state.pendingScreens, action.payload.screen ]\n            }\n        }\n        case smActionTypes.customSelectScreen: {\n            return { ...state, screenName: action.payload.screenName }\n        }\n        default:\n            return state\n    }\n}\n\n","import screenReducer, {initialState as screenInitialState} from './screen'\n// import viewReducer, {initialState as viewInitialState} from 'reducers/view'\nimport {Store} from '@tesler-ui/core/interfaces/store'\nimport {EditorScreenState} from '../interfaces/screen'\nimport {TeslerClientReducersMapObject} from '../interfaces/store'\n\nexport const reducers: TeslerClientReducersMapObject<AppReducers, any> = {\n    screen: {\n        initialState: screenInitialState,\n        reducer: screenReducer\n    },\n/*    view: {\n        initialState: viewInitialState,\n        reducer: viewReducer\n    }\n*/\n}\n\nexport interface AppReducers extends Partial<Store> {\n    screen: EditorScreenState\n}\n\nexport type AppState = Store & AppReducers\n","/*\n * Tesler UI CRA template (typescript)\n * Copyright (C) 2020 Tesler Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from 'react'\nimport {render} from 'react-dom'\nimport {Provider} from '@tesler-ui/core'\nimport {LocaleProvider} from 'antd'\nimport enUs from 'antd/es/locale-provider/en_US'\nimport './index.css'\nimport { AppLayout } from './AppLayout'\nimport { reducers } from './reducers'\n\nconst App = <Provider useEpics={false} customReducers={reducers}>\n    <LocaleProvider locale={enUs}>\n        <AppLayout />\n    </LocaleProvider>\n</Provider>\n\nrender(App, document.getElementById('root'))\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"AppSider_container__3f2rv\",\"header\":\"AppSider_header__vU__h\",\"screens\":\"AppSider_screens__2ggjk\",\"menu\":\"AppSider_menu__QhxC_\",\"screen\":\"AppSider_screen__1U7UF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lock\":\"ScreenBuilder_lock__ervhg\",\"title\":\"ScreenBuilder_title__3H4sk\",\"collapse\":\"ScreenBuilder_collapse__1PZna\"};"],"sourceRoot":""}